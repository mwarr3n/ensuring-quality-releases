name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: infrastructure
    pool:
      vmImage: ubuntu-latest
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '$(KNOWN_HOST_ENTRY)'
        sshPublicKey: '$(PUBLIC_KEY)'
        sshKeySecureFile: 'id_rsa'

#     - task: TerraformInstaller@0
#       displayName: 'Terraform Install'
#       inputs:
#         terraformVersion: '1.0.10'
#     - task: TerraformTaskV2@2
#       displayName: 'Terraform Init'
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         backendAzureRmResourceGroupName: 'tfstate'
#         backendAzureRmStorageAccountName: 'tfstate30471'
#         backendAzureRmContainerName: 'tfstate'
#         backendAzureRmKey: '$(ACCESS_KEY)'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         backendServiceArm: 'terraform-sc'
#     - task: TerraformTaskV2@2
#       displayName: 'Terraform Validate'
#       inputs:
#         provider: 'azurerm'
#         command: 'validate'
#     - task: TerraformTaskV2@2
#       displayName: 'Terraform Destroy'
#       inputs:
#         provider: 'azurerm'
#         command: 'destroy'
#         commandOptions: '-var="public_key=$(PUBLIC_KEY)'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         environmentServiceNameAzureRM: 'terraform-sc'
#     - task: TerraformTaskV2@2
#       displayName: 'Terraform Plan'
#       inputs:
#         provider: 'azurerm'
#         command: 'plan'
#         commandOptions: '-var="public_key=$(PUBLIC_KEY)'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         environmentServiceNameAzureRM: 'terraform-sc'
#     - task: TerraformTaskV2@2
#       displayName: 'Terraform Apply'
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         commandOptions: '-var="public_key=$(PUBLIC_KEY)'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         environmentServiceNameAzureRM: 'terraform-sc'

#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
#       displayName: 'Upload Package'
#       artifact: drop-fakerestapi

# - stage: Deploy
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'Ubuntu-latest'
#     environment: 'TEST'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: 'azure-sc'
#               appName: 'udacity-p3-AppService'
#               appType: webApp
#               package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  
#           # - deployment: VMDeploy
#           #   displayName: 'Deploy Selenium'
#           #   environment:
#           #     name:  'TEST'
#           #     resourceType: VirtualMachine
#           #     # resourceName: 'udacity-p3-vm'
#           #     # tags: 'udacity-p3-vm'
#           #   strategy:
#           #     runOnce:
#           #       deploy:
#           #         steps:
#           #         - task: Bash@3
#           #           inputs:
#           #             targetType: 'inline'
#           #             script: |
#           #               #! /bin/bash
                        
#           #               sudo apt-get upgrade -y
#           #               sudo apt-get install python3-pip -y
#           #               sudo apt-get install unzip -y
#           #               sudo apt-get install -y chromium-browser
#           #               pip3 install selenium
#           #               export PATH=$PATH:some/path

- stage: Test
  jobs:
    # - job: postmanTest
#       pool:
#         vmImage: 'Ubuntu-latest'
#       steps:
#       - task: CmdLine@2
#         displayName: Install Newman
#         inputs:
#           script: | 
#             sudo npm install -g newman
#             sudo npm install -g newman-reporter-junitfull
#           workingDirectory: $(System.DefaultWorkingDirectory)
#       - task: CmdLine@2
#         displayName: Run Regression Tests
#         continueOnError: true
#         inputs:
#           script: | 
#             newman run StarterAPIs.json -r cli,junitfull --reporter-junitfull-export result-data-validation-test.xml
#           workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#       - task: PublishTestResults@2
#         inputs:
#           testRunTitle: 'Regression Test'
#           testResultsFormat: JUnit
#           testResultsFiles: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/*.xml'

#     - job: JmeterTest
#       pool:
#         vmImage: 'Ubuntu-latest'
#       steps:
#         - task: JMeterInstaller@0
#           displayName: 'Install JMeter 5.4.1'
#           inputs:
#             jmeterVersion: '5.4.1'
#         - task: Bash@3
#           displayName: 'JMeter Endurance Test'
#           inputs:
#             targetType: 'inline'
#             script: |
#               jmeter -n -t automatedtesting/jmeter/Starter.jmx -l automatedtesting/jmeter/logs/log-endurance.jtl -e -o automatedtesting/jmeter/report-endurance
#         - task: PublishBuildArtifacts@1
#           displayName: 'Jmeter'
#           inputs:
#             ArtifactName: 'JMeter Endurance Test Report'
#             PathtoPublish: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/report-endurance/'
#         - task: Bash@3
#           displayName: 'JMeter Stress Test'
#           inputs:
#             targetType: 'inline'
#             # automatedtesting/jmeter/logs/log-stress.jtl
#             script: |
#               jmeter -n -t automatedtesting/jmeter/Starter.jmx -l automatedtesting/jmeter/logs/log-stress.jtl -e -o automatedtesting/jmeter/report-stress
#         - task: PublishBuildArtifacts@1
#           displayName: 'Jmeter'
#           inputs:
#             ArtifactName: 'JMeter Stress Test Report'
#             PathtoPublish: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/report-stress/'
    - deployment: VMDeploy
      displayName: 'Deploy VM'
      pool:
        vmImage: ubuntu-latest
        environment: 'TEST'
        strategy:
          runOnce:
            deploy:
              steps:
              - task: ExtractFiles@1
                displayName: 'Extract Selenium Tests'
                inputs:
                  archiveFilePatterns: '$(Pipeline.Workspace)/drop-selenium/$(Build.BuildId)-selenium.zip'
                  destinationFolder: '$(Pipeline.Workspace)/selenium'
                  cleanDestinationFolder: false
                  overwriteExistingFiles: true
              - task: Bash@3
                displayName: 'Install Selenium Packages'
                inputs:
                  targetType: 'inline'
                  script: |
                    #! /bin/bash
                  
                    sudo apt-get upgrade -y
                    sudo apt-get install python3-pip -y
                    sudo apt-get install unzip -y
                    sudo apt-get install -y chromium-browser
                    sudo apt-get install -y expect
                    pip3 install selenium
              - task: Bash@3
                displayName: 'Run Selenium Test'
                inputs:
                  targetType: 'inline'
                  script: |
                    #! /bin/bash

                    cd $(Pipeline.Workspace)/selenium
                    mkdir -p ~/vmlogs
                    unbuffer python3 login.py | tee -a ~/vmlogs/log.txt
